{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.4", "generated_at": "2025-07-22T15:48:41.406641Z", "invocation_id": "56e1255e-e102-4a06-8af2-e874922444a9", "invocation_started_at": "2025-07-22T15:48:40.780084Z", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-07-22T15:48:41.381407Z", "completed_at": "2025-07-22T15:48:41.386148Z"}, {"name": "execute", "started_at": "2025-07-22T15:48:41.386326Z", "completed_at": "2025-07-22T15:48:41.396591Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02134108543395996, "adapter_response": {}, "message": "Database Error in model int_crypto_returns (models/intermediate/int_crypto_returns.sql)\n  no such table: stg_crypto_prices\n  compiled code at target/run/crypto_analytics/models/intermediate/int_crypto_returns.sql", "failures": null, "unique_id": "model.crypto_analytics.int_crypto_returns", "compiled": true, "compiled_code": "\n\nwith price_data as (\n    select * from stg_crypto_prices\n),\n\n-- Calculate returns and price movements (PhD Math: Log Returns for Mathematical Properties)\nreturns_calculation as (\n    select \n        symbol,\n        price_timestamp,\n        price_usd,\n        volume_24h,\n        \n        -- Simple returns (traditional finance)\n        (price_usd / lag(price_usd) over (\n            partition by symbol \n            order by price_timestamp\n        ) - 1) as simple_return,\n        \n        -- Log returns (PhD approach: better for mathematical analysis)\n        -- Natural log of price ratios - mathematically superior for analysis\n        ln(price_usd / lag(price_usd) over (\n            partition by symbol \n            order by price_timestamp\n        )) as log_return,\n        \n        -- Price differences (absolute change)\n        price_usd - lag(price_usd) over (\n            partition by symbol \n            order by price_timestamp\n        ) as price_change_usd,\n        \n        -- Volume change analysis\n        (volume_24h / lag(volume_24h) over (\n            partition by symbol \n            order by price_timestamp\n        ) - 1) as volume_change_pct\n        \n    from price_data\n),\n\n-- Advanced volatility calculations (PhD Math: Multiple Time Windows)\nvolatility_metrics as (\n    select \n        *,\n        \n        -- 7-day rolling volatility (standard deviation of log returns)\n        -- Using log returns is mathematically more robust\n        case \n            when count(*) over (\n                partition by symbol \n                order by price_timestamp \n                rows between 6 preceding and current row\n            ) >= 7 then\n                sqrt(var_pop(log_return) over (\n                    partition by symbol \n                    order by price_timestamp \n                    rows between 6 preceding and current row\n                ))\n            else null \n        end as volatility_7d,\n        \n        -- 30-day rolling volatility\n        case \n            when count(*) over (\n                partition by symbol \n                order by price_timestamp \n                rows between 29 preceding and current row\n            ) >= 30 then\n                sqrt(var_pop(log_return) over (\n                    partition by symbol \n                    order by price_timestamp \n                    rows between 29 preceding and current row\n                ))\n            else null \n        end as volatility_30d,\n        \n        -- Mean returns for risk-adjusted metrics\n        avg(log_return) over (\n            partition by symbol \n            order by price_timestamp \n            rows between 29 preceding and current row\n        ) as mean_return_30d,\n        \n        -- Moving averages (technical analysis)\n        avg(price_usd) over (\n            partition by symbol \n            order by price_timestamp \n            rows between 6 preceding and current row\n        ) as sma_7d,\n        \n        avg(price_usd) over (\n            partition by symbol \n            order by price_timestamp \n            rows between 29 preceding and current row\n        ) as sma_30d\n        \n    from returns_calculation\n),\n\n-- Advanced statistical measures (PhD Math: Risk Metrics and Outlier Detection)\nstatistical_analysis as (\n    select \n        *,\n        \n        -- Sharpe Ratio approximation (risk-adjusted returns)\n        -- PhD approach: Using log returns and proper volatility scaling\n        case \n            when volatility_30d > 0 and volatility_30d is not null\n            then mean_return_30d / volatility_30d\n            else null \n        end as sharpe_ratio_30d,\n        \n        -- Z-score for outlier detection (normalized returns)\n        -- PhD statistical approach: standardized returns\n        case \n            when volatility_30d > 0 and volatility_30d is not null\n            then (log_return - mean_return_30d) / volatility_30d\n            else null \n        end as return_zscore,\n        \n        -- Technical indicators\n        case \n            when sma_7d > sma_30d then 'bullish'\n            when sma_7d < sma_30d then 'bearish'\n            else 'neutral'\n        end as trend_signal,\n        \n        -- Relative Strength Index (RSI) - simplified version\n        -- PhD approach: Mathematical momentum indicator\n        case \n            when avg(case when log_return > 0 then log_return else 0 end) over (\n                partition by symbol \n                order by price_timestamp \n                rows between 13 preceding and current row\n            ) = 0 then 0\n            when avg(case when log_return < 0 then abs(log_return) else 0 end) over (\n                partition by symbol \n                order by price_timestamp \n                rows between 13 preceding and current row\n            ) = 0 then 100\n            else 100 - (100 / (1 + \n                avg(case when log_return > 0 then log_return else 0 end) over (\n                    partition by symbol \n                    order by price_timestamp \n                    rows between 13 preceding and current row\n                ) / \n                avg(case when log_return < 0 then abs(log_return) else 0 end) over (\n                    partition by symbol \n                    order by price_timestamp \n                    rows between 13 preceding and current row\n                )\n            ))\n        end as rsi_14d\n        \n    from volatility_metrics\n),\n\n-- Final mathematical model with advanced risk metrics\nfinal_model as (\n    select \n        *,\n        \n        -- Value at Risk (VaR) at 95% confidence level\n        -- PhD approach: Using normal distribution assumption\n        case \n            when volatility_30d is not null and mean_return_30d is not null\n            then mean_return_30d - (1.645 * volatility_30d)  -- 95% VaR\n            else null \n        end as var_95_1d,\n        \n        -- Maximum drawdown calculation\n        max(price_usd) over (\n            partition by symbol \n            order by price_timestamp \n            rows unbounded preceding\n        ) as running_max_price,\n        \n        -- Risk categorization based on statistical analysis\n        case \n            when abs(return_zscore) > 3 then 'extreme_outlier'\n            when abs(return_zscore) > 2 then 'moderate_outlier'\n            when volatility_30d > 0.05 then 'high_volatility'\n            when volatility_30d > 0.02 then 'medium_volatility'\n            else 'low_volatility'\n        end as risk_category,\n        \n        -- Market regime detection (PhD approach: Statistical classification)\n        case \n            when volatility_30d > 0.04 and mean_return_30d < -0.01 then 'bear_high_vol'\n            when volatility_30d > 0.04 and mean_return_30d > 0.01 then 'bull_high_vol'\n            when volatility_30d <= 0.02 and mean_return_30d > 0.005 then 'bull_low_vol'\n            when volatility_30d <= 0.02 and mean_return_30d < -0.005 then 'bear_low_vol'\n            else 'neutral'\n        end as market_regime\n        \n    from statistical_analysis\n)\n\n-- Final output with all mathematical transformations\nselect \n    symbol,\n    price_timestamp,\n    price_usd,\n    volume_24h,\n    simple_return,\n    log_return,\n    price_change_usd,\n    volume_change_pct,\n    volatility_7d,\n    volatility_30d,\n    mean_return_30d,\n    sma_7d,\n    sma_30d,\n    sharpe_ratio_30d,\n    return_zscore,\n    trend_signal,\n    rsi_14d,\n    var_95_1d,\n    running_max_price,\n    -- Maximum drawdown percentage\n    case \n        when running_max_price > 0 \n        then ((price_usd - running_max_price) / running_max_price) * 100\n        else 0 \n    end as max_drawdown_pct,\n    risk_category,\n    market_regime,\n    \n    -- Cumulative returns using log returns (PhD approach)\n    exp(sum(coalesce(log_return, 0)) over (\n        partition by symbol \n        order by price_timestamp \n        rows unbounded preceding\n    )) - 1 as cumulative_return_pct\n    \nfrom final_model\nwhere log_return is not null  -- Remove first row with null returns", "relation_name": "main.\"int_crypto_returns\"", "batch_results": null}], "elapsed_time": 0.11984109878540039, "args": {"skip_nodes_if_on_run_start_fails": false, "show_all_deprecations": false, "state_modified_compare_vars": false, "require_batched_execution_for_custom_microbatch_strategy": false, "quiet": false, "require_all_warnings_handled_by_warn_error": false, "show_resource_report": false, "defer": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "which": "run", "log_format_file": "debug", "print": true, "profiles_dir": "/Users/bradyali/Documents/GitHub/crypto-data-warehouse-dbt-airflow/dbt_project", "require_explicit_package_overrides_for_builtin_materializations": true, "select": ["int_crypto_returns"], "version_check": true, "indirect_selection": "eager", "use_colors": true, "validate_macro_args": false, "require_yaml_configuration_for_mf_time_spines": false, "use_colors_file": true, "log_level_file": "debug", "strict_mode": false, "project_dir": "/Users/bradyali/Documents/GitHub/crypto-data-warehouse-dbt-airflow/dbt_project", "partial_parse_file_diff": true, "log_format": "default", "source_freshness_run_project_hooks": true, "vars": {}, "introspect": true, "partial_parse": true, "use_fast_test_edges": false, "upload_to_artifacts_ingest_api": false, "write_json": true, "populate_cache": true, "log_level": "info", "send_anonymous_usage_stats": true, "log_file_max_bytes": 10485760, "log_path": "/Users/bradyali/Documents/GitHub/crypto-data-warehouse-dbt-airflow/dbt_project/logs", "state_modified_compare_more_unrendered_values": false, "macro_debugging": false, "favor_state": false, "empty": false, "cache_selected_only": false, "invocation_command": "dbt run --select int_crypto_returns", "exclude": [], "require_resource_names_without_spaces": true, "static_parser": true, "printer_width": 80, "require_nested_cumulative_type_params": false}}